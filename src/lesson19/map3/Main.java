package lesson19.map3;

import java.util.HashMap;
import java.util.Map;

public class Main {
    public static void main(String[] args) {
        HashMap map = new HashMap();    // Выделяет место под 16 элементов. Элемент - хэш-код, сам ключ, значение и
        // Node - ссылка на след-й эл-т. Если у двух элементов одинаковые хэш-коды, они могут попасть в один и тот же bucket.
        // Затем, если хэш-коды элементов совпадают, HashMap использует метод equals() для проверки равенства элементов.
        // Если метод equals() возвращает true, то элементы считаются равными и могут лежать в одной области памяти (bucket).
        // В основе такой структуры хранения в одной корзине лежит LinkedList.
        // Это позволяет оптимизировать поиск и доступ к элементам коллекции. Вот некоторые плюсы такой оптимизации:
        // 1) Ускоренный поиск: При поиске элемента в HashMap, если элементы с одинаковым хэш-кодом находятся в одном bucket, это
        // сокращает количество элементов, с которыми нужно сравнивать целевой элемент, что ускоряет поиск.
        // 2) Улучшенная производительность: Благодаря оптимизации хранения элементов с одинаковым хэш-кодом в одном bucket,
        // производительность операций добавления, удаления и поиска элементов может быть улучшена.
        // 3) Эффективное управление памятью: Поскольку элементы с одинаковым хэш-кодом и равные по методу equals() могут лежать
        // в одной области памяти, это позволяет эффективно управлять памятью и избегать дублирования данных.
        // 4) Повышенная эффективность работы с коллекцией: Когда элементы лежат в одной области памяти, это упрощает
        // работу с коллекцией и уменьшает вероятность ошибок, связанных с дублированием элементов.
        map.put(new Key("Виталий"), 20);
        map.put(new Key("Александр"), 30);
        map.put(new Key("Виталий"), 40);
        map.put(new Key("Александра"), 25);
        System.out.println();
        System.out.println("Значение для ключа Александр " + map.get(new Key("Александр")));
        System.out.println("Значение для ключа Виталий " + map.get(new Key("Виталий")));
        System.out.println("Значение для ключа Александра " + map.get(new Key("Александра")));
//        map.put(new Key("Виталий"), 20);
//        System.out.println("Значение для ключа Виталий " + map.get(new Key("Виталий")));
        Map<Integer, String> map2 = new HashMap<>(16, 0.75f);  // размер массива по-умолчанию 16.
        // 16 * 0,75 = 12. После того как будет добавлено 12 элементов, размер коллекции увеличится в 2 раза, т.е. 32 элемента

    }
}


class Key{
    String key;

    public Key(String key) {
        this.key = key;
    }

    @Override
    public int hashCode() {
        int hash = key.charAt(0);
        System.out.println("hashCode для ключа: " + key + " = " + hash);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        return key.equals(((Key) obj).key);
    }
}